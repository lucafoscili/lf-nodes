from server import PromptServer

from . import CATEGORY
from ...utils.constants import BLUE_CHANNEL_ID, EVENT_PREFIX, FUNCTION, GREEN_CHANNEL_ID, Input, INTENSITY_ID, RED_CHANNEL_ID
from ...utils.helpers.logic import normalize_json_input

# region LF_LUTGeneration
class LF_LUTGeneration:
    @classmethod
    def INPUT_TYPES(self):
        return {
            "required": {
                "color_analysis_dataset": (Input.JSON, {
                    "tooltip": "Transformation dataset generated by Color Analysis Node."
                }),
            },
            "optional": {
                "ui_widget": (Input.LF_TAB_BAR_CHART, {
                    "default": {}
                })
            },
            "hidden": {
                "node_id": "UNIQUE_ID"
            }
        }

    CATEGORY = CATEGORY
    FUNCTION = FUNCTION
    OUTPUT_IS_LIST = (False,)
    OUTPUT_NODE = True
    RETURN_NAMES = ("lut_dataset",)
    RETURN_TYPES = ("JSON",)

    def on_exec(self, **kwargs: dict):
        color_analysis: dict = normalize_json_input(kwargs.get("color_analysis_dataset"))

        lut_datasets: dict = {}
        for image_key, color_analysis in color_analysis.items():
            nodes: list[dict] = []
            dataset: dict = {
                "columns": [
                    {"id": INTENSITY_ID, "title": "Color Intensity"},
                    {"id": RED_CHANNEL_ID, "title": "Red Channel LUT"},
                    {"id": GREEN_CHANNEL_ID, "title": "Green Channel LUT"},
                    {"id": BLUE_CHANNEL_ID, "title": "Blue Channel LUT"}
                ],
                "nodes": nodes
            }

            for node in color_analysis["nodes"]:
                i = node["cells"][INTENSITY_ID]["value"]
                r = node["cells"][RED_CHANNEL_ID]["value"]
                g = node["cells"][GREEN_CHANNEL_ID]["value"]
                b = node["cells"][BLUE_CHANNEL_ID]["value"]

                lut_node = {
                    "id": INTENSITY_ID,
                    "cells": {
                        INTENSITY_ID: {"value": i},
                        RED_CHANNEL_ID: {"value": r, "shape": "number"},
                        GREEN_CHANNEL_ID: {"value": g, "shape": "number"},
                        BLUE_CHANNEL_ID: {"value": b, "shape": "number"}
                    }
                }
                nodes.append(lut_node)

            lut_datasets[image_key] = dataset

        PromptServer.instance.send_sync(f"{EVENT_PREFIX}lutgeneration", {
            "node": kwargs.get("node_id"),
            "datasets": lut_datasets
        })

        return (lut_datasets,)
# endregion

# region Mappings
NODE_CLASS_MAPPINGS = {
    "LF_LUTGeneration": LF_LUTGeneration,
}

NODE_DISPLAY_NAME_MAPPINGS = {
    "LF_LUTGeneration": "LUT Generation",
}
# endregion